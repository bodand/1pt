<div class="mx-4 w-full flex flex-col">
  <h1 class="mb-1 lg:mb-2 text-4xl">New event</h1>

  <%= form_for @event, url: '/event/create' do |form| %>
    <div class="kinda-sm:w-fit">
      <%= render 'layouts/dropping_editor', { form: form, edit: :text_field, property: :name } %>
    </div>

    <div class="flex flex-row px-12 sm:px-4 flex-wrap space-x-4">
      <%= form.label :for_user %>
      <button id="for_user" type="button" onclick="show_modal('for_user_modal')" class="<%= button_classes %>">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"/>
        </svg>
      </button>
      <div id="user_renders" class="flex flex-row flex-wrap gap-2"></div>
    </div>
    <div class="flex flex-row px-12 sm:px-4 flex-wrap items-center">
      <%= label_tag :same_date %>
      <%= check_box_tag :same_date, onchange: 'handle_changed(this, "date")', class: "ml-1 mr-4" %>
      <%= label_tag :same_time %>
      <%= check_box_tag :same_time, onchange: 'handle_changed(this, "time")', class: 'ml-1 mr-4' %>
    </div>

    <div class="mt-4 mb-1 lg:mb-2 flex flex-row items-center">
      <h2 class="text-2xl">Possible appointments</h2>
      <%= button_tag type: 'button' \
        , onclick: 'add_entry_at_end()' \
        , class: 'ml-4 ' + button_classes do %>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"/>
        </svg>
      <% end %>
    </div>
    <div id="entries" class="flex flex-col gap-3 sm:ml-8">
    </div>
    <%= button_tag class: 'w-fit px-4 my-8 ' + button_classes do %>
      Create event
    <% end %>
  <% end %>

  <div id="for_user_modal" aria-hidden="true"
       class="hidden fixed top-0 left-0 right-0 z-50 w-full p-4 flex justify-center items-center overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative w-full max-w-2xl max-h-full">
      <div class="relative border border-solid border-charcoal bg-alabaster shadow-2xl dark:bg-gray-700">
        <div class="flex items-start justify-between p-4">
          <h3 class="text-2xl">
            Find users
          </h3>
          <button type="button"
                  onclick="close_modal('for_user_modal')"
                  class="<%= button_classes('bg-carmine') + ' h-8' %>">
            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
            </svg>
          </button>
        </div>

        <div class="pb-4 px-4">
          <%= label_tag :search_users %>
          <input id="search_users" type="text" onkeyup="change_user_filter(this.value)"/>
          <div id="users" class="ml-4 mt-8 flex flex-col gap-3">
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="apt_user_search_template" class="hidden" aria-hidden="true">
    <div class="flex flex-row items-center justify-between gap-3">
      <div class="text-lg">
        NAME
      </div>
      <button type="button" class="block <%= button_classes %>" onclick="add_user('NAME', ID)">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M18 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0ZM3 19.235v-.11a6.375 6.375 0 0 1 12.75 0v.109A12.318 12.318 0 0 1 9.374 21c-2.331 0-4.512-.645-6.374-1.766Z"/>
        </svg>
      </button>
    </div>
  </div>

  <div id="apt_user_template" class="hidden" aria-hidden="true">
    <div id="user_X" class="flex flex-row w-fit px-3 py-0.5 shadow items-center gap-2 bg-celestial rounded-sm">
      <div class="text-sm">
        NAME
      </div>
      <%= hidden_field_tag "event[for_users][X]", "ID" %>
      <button type="button" class="hover:text-carmine" onclick="remove_user_at_index(X)">
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
      </button>
    </div>
  </div>

  <div id="apt_entry_template" class="hidden" aria-hidden="true">
    <div class="flex flex-row flex-wrap justify-end sm:justify-start gap-3">
      <div class="flex flex-col w-full sm:w-1/3 md:w-1/4 lg:w-1/6 date_entry">
        <span>Date</span>
        <%= date_field_tag "event[entries][X].date" %>
      </div>
      <div class="flex flex-col w-full sm:w-1/3 md:w-1/6 lg:w-[10%] xl:w-1/12 time_entry">
        <span>Time</span>
        <%= time_field_tag "event[entries][X].time" %>
      </div>
      <div class="flex flex-row items-end ml-3 gap-3">
        <%= button_tag type: 'button', onclick: 'remove_index(X)', class: button_classes('bg-carmine') do %>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"/>
          </svg>
        <% end %>
        <%= button_tag type: 'button', onclick: 'add_entry_at_index(X)', class: button_classes do %>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"/>
          </svg>
        <% end %>
      </div>
    </div>
  </div>

  <script type="application/javascript">
      addEventListener("load", () => {
          document.getElementById("search_users").value = ''
      });

      function add_entry_at_end() {
          let currentLength = entries_state.get_length()
          if (!currentLength) currentLength = 0
          add_entry_at_index(currentLength)
      }

      function add_entry_at_index(index) {
          entries_state.addAt({}, index)
      }

      function show_modal(modal) {
          const html = document.getElementById(modal)
          update_element(html, show_via_class)
      }

      function close_modal(modal) {
          const html = document.getElementById(modal)
          update_element(html, hide_via_class)
      }

      function change_user_filter(current) {
          users_state.replaceAt(current, 0)
      }

      function add_user(name, id) {
          close_modal('for_user_modal')
          let currentLength = users_render_state.get_length()
          if (!currentLength) currentLength = 0
          users_render_state.addAt({name: name, id: id}, currentLength)
      }

      function remove_user_at_index(index) {
          users_render_state.removeAt(index)
      }

      const state = function () {
          let state = [];
          const listeners = [];
          return {
              register: listener => listeners.push(listener),
              get_length: () => state.length,
              addAt: (e, idx) => {
                  const elem = make_elem(e, idx)
                  const [head, tail] = push_at_index(state, elem, idx)
                  const updatedTail = tail.map(update_tail(1))
                  const reversedTail = updatedTail.slice().reverse()
                  listeners.forEach(listener => listener("updates", reversedTail))
                  listeners.forEach(listener => listener("add", elem))
                  state = [...head, ...updatedTail.map(x => x.new)]
              },
              replaceAt: (e, idx) => {
                  const elem = make_elem(e, idx)
                  const [head, tail] = push_at_index(state, elem, idx)
                  const replaced = tail[0]
                  const update = {
                      new: elem,
                      old: replaced
                  }
                  listeners.forEach(listener => listener("updates", [update]))
                  state = [...head, ...tail.slice(1)]
              },
              removeAt: idx => {
                  const filterPred = x => idx === x.index;
                  const [head, tail] = partition(state, filterPred)
                  const updatedTail = filter(tail, not(filterPred)).map(update_tail(-1))
                  listeners.forEach(listener => listener("updates", updatedTail))
                  listeners.forEach(listener => listener("remove", idx))
                  state = [...head, ...updatedTail.map(x => x.new)]
              }
          }
      }
      const users_state = state()
      users_state.register(update_users_search_listener)

      const users_render_state = state()
      users_render_state.register(update_users_listener)

      const entries_state = state()
      entries_state.register(update_entries_listener)

      async function update_users_search_listener(event, eventArgs) {
          switch (event) {
              case "updates":
                  for (const arg of eventArgs) {
                      if (arg.new.elem.length < 3) continue;

                      const users = await fetch(
                          `/api/users?q=${arg.new.elem}&t=10`,
                          {
                              mode: 'same-origin',
                              cache: 'no-cache',
                              headers: {"Accept": "application/json"}
                          })
                      if (!users.ok) {
                          console.error("Couldn't fetch users")
                          return
                      }
                      render_users(await users.json())
                  }
                  break
          }
      }

      function render_users(users) {
          const templ = get_ui_template('apt_user_search_template').innerHTML
          const users_html = users.map(user => fill_in_user(templ, user))
          document.getElementById('users').innerHTML = users_html.join(" ")
      }

      function fill_in_user(template, user) {
          return template

              .replaceAll("NAME", user.name)
              .replaceAll("ID", user.id)
      }

      function update_tail(by) {
          return function (elem) {
              return {
                  old: elem,
                  new: {
                      index: elem.index + by,
                      elem: elem.elem
                  }
              }
          }
      }

      function make_elem(value, index) {
          return {index: index, elem: value}
      }

      function push_at_index(array, elem, index) {
          const head = array.slice(0, index)
          const tail = array.slice(index)
          return [[...head, elem], tail]
      }

      function remove_index(index) {
          entries_state.removeAt(index)
      }

      function update_users_listener(action, eventArgs) {
          switch (action) {
              case "updates": {
                  eventArgs.forEach(x => {
                      update_user_at_index(x.old.index, x.new)
                  })
                  break
              }
              case "remove": {
                  get_elem_by_index('user', eventArgs).remove()
                  break
              }
              case "add": {
                  const elem = eventArgs
                  const new_entry = make_user_with_index(elem)
                  insert_user_at_index(new_entry, elem.index)
                  break
              }
          }
      }

      function update_entries_listener(action, eventArgs) {
          switch (action) {
              case "updates": {
                  eventArgs.forEach(x => {
                      update_entry_at_index(x.old.index, x.new)
                  })
                  break
              }
              case "remove": {
                  get_elem_by_index('entry', eventArgs).remove()
                  break
              }
              case "add": {
                  const elem = eventArgs
                  const new_entry = make_entry_with_index(elem.index)
                  insert_entry_at_index(new_entry, elem.index)
                  break
              }
          }
      }

      function update_entry_at_index(index, elem) {
          const html = get_elem_by_index("entry", index)
          const newHtml = html.cloneNode(true)
          newHtml.innerHTML = fill_entity_with_index(html.innerHTML, elem.index, index)
          const date = get_input_in_element(html, `input[type="date"]`)
          const time = get_input_in_element(html, 'input[type="time"]')
          html.innerHTML = newHtml.innerHTML
          set_input_in_element(html, 'input[type="date"]', date)
          set_input_in_element(html, 'input[type="time"]', time)
          html.id = `entry_${elem.index}`
      }

      function update_user_at_index(index, elem) {
          const html = get_elem_by_index('user', index)
          const newHtml = make_user_with_index(elem)
          const user_id = get_input_in_element(html, `input[type="hidden"]`)
          html.outerHTML = newHtml
          set_input_in_element(html, 'input[type="hidden"]', user_id)
          html.id = `user_${elem.index}`
      }

      function get_input_in_element(from, selector) {
          return from.querySelector(selector).value
      }

      function set_input_in_element(from, selector, value) {
          from.querySelector(selector).value = value
      }

      function remove_entry_at_index(index) {
          get_elem_by_index(index).remove()
      }

      function insert_entry_at_index(entry, index) {
          if (index === 0) {
              document.getElementById("entries").insertAdjacentHTML("afterbegin", entry)
          } else {
              const currentChild = document.querySelector(`#entries>div:nth-child(${index})`)
              currentChild.insertAdjacentHTML("afterend", entry)
          }
      }

      function insert_user_at_index(entry, index) {
          if (index === 0) {
              document.getElementById("user_renders").insertAdjacentHTML("afterbegin", entry)
          } else {
              const currentChild = document.querySelector(`#user_renders>div:nth-child(${index})`)
              currentChild.insertAdjacentHTML("afterend", entry)
          }
      }

      function make_entry_with_index(index) {
          const template_holder = get_ui_template('apt_entry_template')
          const template = template_holder.children.item(0).cloneNode(true)
          template.id = `entry_${index}`
          return fill_entity_with_index(template.outerHTML, index)
      }

      function make_user_with_index(elem) {
          const template_holder = get_ui_template('apt_user_template')
          const template = template_holder.children.item(0).cloneNode(true)
          template.id = `user_${elem.index}`
          return fill_entity_with_index(fill_in_user(template.outerHTML, elem.elem), elem.index)
      }

      function get_ui_template(id) {
          return document.getElementById(id)
      }

      function get_elem_by_index(type, idx) {
          return document.getElementById(`${type}_${idx}`)
      }

      function fill_entity_with_index(template, id, symbol = 'X') {
          const regex = new RegExp(`(?<=[\\[(_])${symbol}(?=[\\])."])`, 'gm')
          return template.replace(regex, id)
      }

      function get_other_type(type) {
          if (type === 'date') return 'time'
          return 'date'
      }

      function uncheck_checkbox(type) {
          document.getElementById(`same_${type}`).checked = false
      }

      function handle_changed(checkbox, type) {
          update_field(type, get_updater(checkbox.checked))
          if (checkbox.checked) {
              const other = get_other_type(type)
              uncheck_checkbox(other)
              update_field(other, get_updater(false))
          }
      }

      function get_updater(checked) {
          if (checked) return hide_via_class;
          return show_via_class;
      }

      function update_field(field, updater) {
          const entries = document.getElementsByClassName(`${field}_entry`)
          transform(entries, entry => update_element(entry, updater))
      }

      function update_element(elem, fn) {
          elem.classList = fn(elem.classList)
      }

      function hide_via_class(classes) {
          return ["hidden", ...classes].join(" ")
      }

      function show_via_class(classes) {
          return filter(classes, klass => klass !== "hidden").join(" ")
      }

      function transform(list, fn) {
          for (let listElement of list) {
              fn(listElement)
          }
      }

      function partition(list, fn) {
          const before = [];
          const after = [];
          let seen = false;
          for (let e of list) {
              if (!seen) seen = fn(e)
              if (seen) after.push(e)
              else before.push(e)
          }
          return [before, after]
      }

      function not(fn) {
          return function (...args) {
              return !!!fn(...args)
          }
      }

      function filter(list, fn) {
          const ret = []
          for (let e of list) {
              if (fn(e)) ret.push(e)
          }
          return ret
      }
  </script>
</div>
